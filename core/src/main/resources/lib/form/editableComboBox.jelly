<!--
	Attributes:

	If @field is specified:
	   in this case, name and value are inferred from field,
	   and checkUrl is auto-generated if the check method is present.
	Otherwise
	   @name and @value are mandatory.

	<%@attribute name="id" required="true" %>
	<%@attribute name="clazz" required="false" %>
	<%@attribute name="items" type="java.lang.Object" description="Optional list of possible values" %>
-->
<!-- Tomcat doesn't like us using the attribute called 'class' -->
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form">
	<j:if test="${editableComboBox_source_loaded==null}">
	  <script type="text/javascript" src="${request.contextPath}/scripts/utilities.js"/>
    <script type="text/javascript" src="${request.contextPath}/scripts/combobox.js"/>
	  <j:set target="${requestScope}" property="editableComboBox_source_loaded" value="true" />
	</j:if>

  <j:set var="checkUrl" value="${h.getCheckUrl(attrs.checkUrl,descriptor,attrs.field)}" />

  <input id="${attrs.id}" autocomplete="off" class="${attrs.clazz} ${h.ifThenElse(checkUrl!=null,'validated','')}"
         name ="${h.defaulted(attrs.name,'_.'+attrs.field)}"
         value="${h.defaulted(attrs.value,instance[attrs.field])}"
         checkUrl="${checkUrl}" />
    <j:set target="${requestScope}" property="editableComboBoxCount" value="${editableComboBoxCount + 1}" defaultValue="1" />
    <j:set var="uniqid" value="${id + editableComboBoxCount}" />
	<j:set target="${requestScope}" property="editableComboBox" value="${uniqid}" />
	<script type="text/javascript">
	  var ${uniqid}_values = new Array();

	  <!-- fill in values -->
	  <j:if test="${items!=null}">
	    <j:forEach var="v" items="${items}">
	      <f:editableComboBoxValue value="${v}" />
	    </j:forEach>
	  </j:if>
	  <d:invokeBody />

		<![CDATA[
	  function ${uniqid}_Callback(value /*, comboBox*/) {
	    var items = new Array();
	    var candidates = ${uniqid}_values;
	    if (value.length > 0) { // if no value, we'll not provide anything
	      value = value.toLowerCase();
	      for (var i = 0; i < candidates.length; i++) {
	        if (candidates[i].toLowerCase().indexOf(value) >= 0) {
	          items.push(candidates[i]);
	          if(items.length>20)
	            break; // 20 items in the list should be enough
	        }
	      }
	    }
	    return items; // equiv to: comboBox.setItems(items);
	  }
	  ]]>

	  <!-- IE doesn't like a combobox to be created before the page is fully loaded. -->
	  var oldOnLoadFor${uniqid} = window.onload;
	  window.onload = function() { if(oldOnLoadFor${uniqid}) oldOnLoadFor${uniqid}();
	    new ComboBox("${id}", ${uniqid}_Callback);
	  }
	</script>
</j:jelly>