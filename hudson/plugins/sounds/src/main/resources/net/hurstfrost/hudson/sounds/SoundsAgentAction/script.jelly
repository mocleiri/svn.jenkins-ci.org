<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler"><st:contentType value="text/javascript;charset=UTF-8" />
 	VERSION = null;
 	AUDIO_CAPABLE = _sounds_audioCapable();
 	DEFAULT_REFRESH_PERIOD = 5000;
  	FAIL_REFRESH_PERIOD = 60000;
  	BROWSER_AUDIO_PREPARE_PERIOD = 300;
  	
  	_sounds_AUDIO = [];
  	
  	function _sounds_audioCapable() {
  		var	audio = document.createElement('audio');
  		
  		if (!!audio.canPlayType) {
  			return true;
  		}
  		
  		return false;
  	}
  	
  	function _sounds_playSound(uri, afterMs) {
  		if (!AUDIO_CAPABLE) {
  			return false;
  		}
  		
  		try {
  			afterMs += BROWSER_AUDIO_PREPARE_PERIOD;	// Gives browser chance to load URL and prepare to play, helps sync.
			var	audio = new Audio(uri);
			_sounds_AUDIO.push(audio);
			audio.onended = function() {
				var i = _sounds_AUDIO.indexOf(audio);
				
				if (i >= 0) {
					_sounds_AUDIO.splice(i, 1);
				}
			}
			if (afterMs > 0) {
				setTimeout(_sounds_playAudio.bind(this, audio), afterMs);
			} else {
				_sounds_playAudio(audio);
			}
			return true;
		} catch (e) {
			return false;
		}
  	}
  	
  	function _sounds_playAudio(audio) {
  		if (console) { console.log('PLAYED at ' + new Date().getTime()/1000.0); };
		audio.play();
  	}
  	
  	function _sounds_cancelSounds() {
 		if (console) console.log('CANCEL');
 		
 		for (i=0; i&lt;_sounds_AUDIO.length; i++) {
 			var	a = _sounds_AUDIO[i];
 			console.log('cancel:'+a);
 			try {
 				a.pause();
 				a.src = '';
 			} catch (e) {
 				console.log(e);
 			}
 		}
 		_sounds_AUDIO = [];
  	}
  	
  	function _sounds_pollForSounds(jsonFetcher, delay) {
  		var	f = jsonFetcher(
  			function(soundsResponse) {
  				var	played;
  				try {
 					if (soundsResponse.v != undefined) {
 						console.log('rsp:p='+soundsResponse.p+',v='+soundsResponse.v+',play='+(soundsResponse.play!=undefined)+',['+_sounds_AUDIO.length+']');
 						window.VERSION = soundsResponse.v;
 					}
 					if (soundsResponse.x) {
 						_sounds_cancelSounds();
 					}
 					if (soundsResponse.play) {
 						played = _sounds_playSound(soundsResponse.play, soundsResponse.d);
 					}
				  	_sounds_pollForSounds(jsonFetcher, soundsResponse.p);
 				} catch (e) {
				  	_sounds_pollForSounds(jsonFetcher, FAIL_REFRESH_PERIOD);
 				}
 			},
  			function() {
			  	_sounds_pollForSounds(jsonFetcher, FAIL_REFRESH_PERIOD);
  			}
  		);
  		
  		//if (console) console.log('scheduling poll @'+window.VERSION+' in ' + (delay?delay:DEFAULT_REFRESH_PERIOD) + 'ms');
		window.setTimeout(f, delay?delay:DEFAULT_REFRESH_PERIOD);
  	}
</j:jelly>
