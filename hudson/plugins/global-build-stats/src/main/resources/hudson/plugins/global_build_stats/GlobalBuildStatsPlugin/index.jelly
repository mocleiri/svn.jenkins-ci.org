<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:i="jelly:fmt">
<l:layout title="${%Global Build Stats}" permission="${it.requiredPermission}">

  <j:invoke var="FIELD_FILTER_ALL" on="${it}" method="getFieldFilterALL" />
  <j:invoke var="FIELD_FILTER_REGEX" on="${it}" method="getFieldFilterRegex" />

  <l:side-panel>
    <l:tasks>
      <l:task icon="images/24x24/up.gif" href="${rootURL}/" title="${%Back to Dashboard}" />
      <l:task icon="images/24x24/save.gif" href="#" onclick="new BuildStatConfigForm(null).displayBuildStatConfigForm();" title="${%Create new chart}" />
      <l:task icon="images/24x24/gear2.gif" href="#Initialize" title="${%Data Initialization}" />
    </l:tasks>
  </l:side-panel>

  <l:header>
    <st:include page="/hudson/plugins/global_build_stats/GlobalBuildStatsPlugin/formFunctions.jelly" />
	<script type="text/javascript"><![CDATA[
	BUILD_STAT_CONTAINER_ID_PREFIX = "container_buildStatConfig_";
	
	var BuildStatConfigs = Class.create();
	BuildStatConfigs.prototype = {
		initialize: function(){
			this.ids = new Array();
		},
		add: function(buildStatConfig){
			this.createChartElement(buildStatConfig);
			this[buildStatConfig.id] = buildStatConfig;
			this.ids[this.size()] = buildStatConfig.id;
		},
		update: function(bsId, buildStatConfig){
			this.updateChartElement(bsId, buildStatConfig);
			this[buildStatConfig.id] = buildStatConfig;
			
			// Is id is updated, remove old id reference
			if(bsId != buildStatConfig.id){
				this[bsId] = null;
				this.ids = this.ids.without(bsId);
			}
		},
		// renamed from delete to deleteChart since in chrome_linux, delete is a reserved keyword
		deleteChart: function(buildStatId){
			this.deleteChartElement(buildStatId);
			this[buildStatId] = null;
			this.ids = this.ids.without(buildStatId);
		},
		deleteChartElement: function(buildStatId){
			var buildStatContainerId = BUILD_STAT_CONTAINER_ID_PREFIX+buildStatId;
			var previousBuildStatContainer = this.getPreviousBuildStatConfigContainer(buildStatContainerId);
			$(buildStatContainerId).update("");
			$(buildStatContainerId).id="deletedBuildStatConfig";
			if(previousBuildStatContainer != null){
				this.updateButtonsFor(this.retrieveBuildStatIdFromContainerId(previousBuildStatContainer.id));
			}
		},
		getBuildStat: function(buildStatId){
			return this[buildStatId];
		},
		size: function(){
			return this.ids.length;
		},
		getHTMLWithoutContainerFromBuildStatConfig: function(buildStatConfiguration){
			var currentContext = createTemplateContext(buildStatConfiguration);
			
			var imageTemplateStr = '';
			imageTemplateStr += '<img style="display:inline; float:left; margin-bottom: 10px; margin-right: 10px;" id="img_#{id}" \n';
			imageTemplateStr += 'src="#{rootURL}/plugin/global-build-stats/showChart?buildStatId=#{id}&time=#{currentTime}" />\n';
			imageTemplateStr += '<div id="map_#{id}_container"></div><br/>\n';
			var imageTemplate = new Template(imageTemplateStr);
			var image = imageTemplate.evaluate(currentContext);
			
			currentContext = jsonConcat(currentContext, { buildStatImage: image});
			
			var buildStatConfigWithoutContainerTemplate = new Template(getTemplateContent('buildStatConfigWithoutContainerTemplate'));
			var buildStatConfigWithoutContainerHTML = buildStatConfigWithoutContainerTemplate.evaluate(currentContext);
			
			return buildStatConfigWithoutContainerHTML;
		},
		isBuildStatConfigContainer: function(htmlElement){
			return htmlElement != null && htmlElement.id != null && htmlElement.id.startsWith(BUILD_STAT_CONTAINER_ID_PREFIX);
		},
		getPreviousBuildStatConfigContainer: function(currentBuildStatConfigContainerId){
			var container = $(currentBuildStatConfigContainerId).previous();
			while(container != null && !this.isBuildStatConfigContainer(container)){
				container = container.previous();
			}
			return container;
		},
		getNextBuildStatConfigContainer: function(currentBuildStatConfigContainerId){
			var container = $(currentBuildStatConfigContainerId).next();
			while(container != null && !this.isBuildStatConfigContainer(container)){
				container = container.next();
			}
			return container;
		},
		updateButtonsFor: function(buildStatConfigId){
			var containerId = BUILD_STAT_CONTAINER_ID_PREFIX+buildStatConfigId;
			var container = $(containerId);
			
			if($('moveUp_'+buildStatConfigId) != null){
				if(this.getPreviousBuildStatConfigContainer(containerId) != null){
					$('moveUp_'+buildStatConfigId).show();
				} else {
					$('moveUp_'+buildStatConfigId).hide();
				}
			}
			if($('moveDown_'+buildStatConfigId) != null){
				if(this.getNextBuildStatConfigContainer(containerId) != null){
					$('moveDown_'+buildStatConfigId).show();
				} else {
					$('moveDown_'+buildStatConfigId).hide();
				}
			}
		},
		swapBuildStatConfigs: function(containerId1, containerId2){
			var buildStatConf1 = this.getBuildStatConfigFromContainerId(containerId1);
			var buildStatConf2 = this.getBuildStatConfigFromContainerId(containerId2);
		
			var buildStatConf1Container = $(BUILD_STAT_CONTAINER_ID_PREFIX+buildStatConf1.id);
			var buildStatConf2Container = $(BUILD_STAT_CONTAINER_ID_PREFIX+buildStatConf2.id);
			
			var replacedHTML = buildStatConf1Container.innerHTML;
			buildStatConf1Container.innerHTML = buildStatConf2Container.innerHTML;
			buildStatConf2Container.innerHTML = replacedHTML;
			
			buildStatConf1Container.id = BUILD_STAT_CONTAINER_ID_PREFIX+buildStatConf2.id;
			buildStatConf2Container.id = BUILD_STAT_CONTAINER_ID_PREFIX+buildStatConf1.id;
			
			this.updateButtonsFor(buildStatConf1.id);
			this.updateButtonsFor(buildStatConf2.id);
		},
		retrieveBuildStatIdFromContainerId: function(containerId){
			var extractingRegex = new RegExp("^"+BUILD_STAT_CONTAINER_ID_PREFIX+"(.*)$", "g");
			var buildStatId = null;
			if(extractingRegex.test(containerId)){
				extractingRegex.exec(containerId);
				buildStatId = RegExp.$1;
			}
			return buildStatId;
		},
		getBuildStatConfigFromContainerId: function(containerId){
			var buildStatConfigId = this.retrieveBuildStatIdFromContainerId(containerId);
			var buildStatConfig = null;
			if(buildStatConfigId != null){
				buildStatConfig = this.getBuildStat(buildStatConfigId);
			}
			return buildStatConfig;
		},
		fillDivWithChart: function(divId, buildStatConfig, updateButtonsCallback){
			ajaxCall('link', rootURL+'/plugin/global-build-stats/createChartMap?buildStatId='+buildStatConfig.id, function(ret){
				var content = BUILD_STAT_CONFIGS.getHTMLWithoutContainerFromBuildStatConfig(buildStatConfig);
				$(divId).update(content);
				$('map_'+buildStatConfig.id+'_container').update(ret.responseText);
				var mapId = "map_"+buildStatConfig.id;
				$('map_'+buildStatConfig.id+'_container').firstChild.setAttribute("name", mapId);
				$('img_'+buildStatConfig.id).setAttribute("usemap", "#" + mapId);
				
				updateButtonsCallback.call(null);
			}, true);
		},
		updateChartElement: function(bsId, buildStatConfig){
			$(BUILD_STAT_CONTAINER_ID_PREFIX+bsId).id = BUILD_STAT_CONTAINER_ID_PREFIX+buildStatConfig.id;
			this.fillDivWithChart(BUILD_STAT_CONTAINER_ID_PREFIX+buildStatConfig.id, buildStatConfig, function(){
				BUILD_STAT_CONFIGS.updateButtonsFor(buildStatConfig.id);
			});
		},
		createChartElement: function(buildStatConfig){
			if(this.size() == 0){
				$('buildStatConfigsContainer').update("");
			}
			
			var newBuildStatContainerId = BUILD_STAT_CONTAINER_ID_PREFIX+buildStatConfig.id;
			
			// This stuff could be simpler with Prototype 1.6...
			var newBuildStatConf = document.createElement("div");
			newBuildStatConf.setAttribute("style", "clear:left");
			newBuildStatConf.setAttribute("id", newBuildStatContainerId);
			
			$('buildStatConfigsContainer').appendChild(newBuildStatConf);
			this.fillDivWithChart(newBuildStatContainerId, buildStatConfig, function(){
				BUILD_STAT_CONFIGS.updateButtonsFor(buildStatConfig.id);
				var previousBuildStatContainer = BUILD_STAT_CONFIGS.getPreviousBuildStatConfigContainer(newBuildStatContainerId);
				if(previousBuildStatContainer != null){
					BUILD_STAT_CONFIGS.updateButtonsFor(BUILD_STAT_CONFIGS.retrieveBuildStatIdFromContainerId(previousBuildStatContainer.id));
				}
			});
		},
		moveBuildStat: function(buildStatId, moveType){
			var moveUrl = "";
			if(moveType.toLowerCase() == "up"){
				moveUrl = rootURL+'/plugin/global-build-stats/moveUpConf?buildStatId='+buildStatId;
			} else if(moveType.toLowerCase() == "down"){
				moveUrl = rootURL+'/plugin/global-build-stats/moveDownConf?buildStatId='+buildStatId;
			}
			
			ajaxCall('link', moveUrl, function(transport) {
			  	var currentContainerId = BUILD_STAT_CONTAINER_ID_PREFIX+buildStatId;
				var currentChartContainer = $(currentContainerId);
				var otherChartContainer = null;
				if(moveType.toLowerCase() == "up"){
					otherChartContainer = BUILD_STAT_CONFIGS.getPreviousBuildStatConfigContainer(currentContainerId);
				} else if(moveType.toLowerCase() == "down"){
					otherChartContainer = BUILD_STAT_CONFIGS.getNextBuildStatConfigContainer(currentContainerId);
				}
				
				BUILD_STAT_CONFIGS.swapBuildStatConfigs(currentChartContainer.id, otherChartContainer.id);
				
				window.location.href = "#"+BUILD_STAT_CONTAINER_ID_PREFIX+buildStatId;
			});
		}
	};
	
	function deleteBuildStat(buildStatId){
		var deletionConfirmationMessage = $('deletionConfirmationMessage').innerHTML;
		if(confirm(deletionConfirmationMessage)){
			ajaxCall('link', 'deleteConfiguration?buildStatId='+buildStatId, function(transport) {
			  	BUILD_STAT_CONFIGS.deleteChart(buildStatId);
			});
		}
	}
	
	var BuildStatConfigForm = Class.create();
	BuildStatConfigForm.prototype = {
		initialize: function(buildStatConfId){
			if(buildStatConfId != null){
				this.buildStatConf = BUILD_STAT_CONFIGS.getBuildStat(buildStatConfId);
			} else {
				this.buildStatConf = null;
			}
			this.buildStatConfId = getBuildStatConfigId(buildStatConfId);
			CURRENT_FORM = this;
		},
		
		selectOption: function(selectElement, optionValue){
			for (var i=0; i<selectElement.options.length; i++) {
				selectElement.options[i].selected = selectElement.options[i].value == optionValue;
			}
			selectElement.onchange();
		},
		
		changeChartLengthUnit: function(newScale){
			for(var i=0; i<chartLengthUnits.length; i++){
			    if(newScale == chartLengthUnits[i]){
			    	document.getElementById(this.buildStatConfId+'_'+chartLengthUnits[i]).style.display = "inline";
			    } else {
			    	document.getElementById(this.buildStatConfId+'_'+chartLengthUnits[i]).style.display = "none";
			    }
			}
		},
		
		isModificationMode: function(){
			return this.buildStatConf != null;
		},
		
		// Called after buildStatConfigForm is displayed
		initForm: function(){
	      if(this.buildStatConf!=null && this.buildStatConf.historicScale != '') {
	      	this.selectOption($(this.buildStatConfId+'_historicScale'), this.buildStatConf.historicScale); 
	      }
	      if(this.buildStatConf!=null && this.buildStatConf.yAxisChartType!= '') {
	      	this.selectOption($(this.buildStatConfId+'_yAxisChartType'), this.buildStatConf.yAxisChartType); 
	      }
		  // Valeur par défaut de job filter
		  if($(this.buildStatConfId+'_jobFilter').value == ''){
		  	$(this.buildStatConfId+'_jobFilter').value = 'ALL';
		  }
		  
		  if($(this.buildStatConfId+'_jobFilter').value.indexOf(FIELD_FILTER_REGEX) != -1){
		  	  $(this.buildStatConfId+'_jobFilteringType_REGEX').checked = 'checked';
		  	  initializeRegexField(this.buildStatConfId, this.buildStatConf.jobFilter);
 		 	  $(this.buildStatConfId+'_jobFilteringType_REGEX').onchange();
		  	  $(this.buildStatConfId+'_jobNameRegex').disabled = false;
		  } else if($(this.buildStatConfId+'_jobFilter').value.indexOf(FIELD_FILTER_ALL) != -1){
		  	  $(this.buildStatConfId+'_jobFilteringType_ALL').checked = 'checked';
		  	  $(this.buildStatConfId+'_jobFilteringType_ALL').onchange();
		  }
		  
		  // Changing default values...
		  if(this.buildStatConf != null){
			  if(this.buildStatConf.successShown == false) { $(this.buildStatConfId+'_successShown').checked = false; }
			  if(this.buildStatConf.failuresShown == false) { $(this.buildStatConfId+'_failuresShown').checked = false; }
			  if(this.buildStatConf.unstablesShown == false) { $(this.buildStatConfId+'_unstablesShown').checked = false; }
			  if(this.buildStatConf.abortedShown == false) { $(this.buildStatConfId+'_abortedShown').checked = false; }
			  if(this.buildStatConf.notBuildsShown == true) { $(this.buildStatConfId+'_notBuildsShown').checked = true; }
			  if(this.buildStatConf.buildStatusesShown == false) { $(this.buildStatConfId+'_buildStatusesShown').checked = false; }
			  if(this.buildStatConf.totalBuildTimeShown == true) { $(this.buildStatConfId+'_totalBuildTimeShown').checked = true; }
			  if(this.buildStatConf.averageBuildTimeShown == true) { $(this.buildStatConfId+'_averageBuildTimeShown').checked = true; }
		  }
		  		  
		  // Initializing validations 
		  $(this.buildStatConfId+'_title').onchange();
		  $(this.buildStatConfId+'_buildStatWidth').onchange();
		  $(this.buildStatConfId+'_buildStatHeight').onchange();
		  $(this.buildStatConfId+'_historicScale').onchange();
		  $(this.buildStatConfId+'_historicLength').onchange();
		},

		// Display a creation/modification form for build stat config
		displayBuildStatConfigForm: function(){
			var modificationMode = this.isModificationMode();
		
	       	if(modificationMode){
	       		var submitLabel = $('updateSubmitLabel').innerHTML;
	       		var popupTitle = $('updatePopupTitle').innerHTML;
	    		var bsId = this.buildStatConfId;
	       	} else {
	       		var submitLabel = $('createSubmitLabel').innerHTML;
	       		var popupTitle = $('createPopupTitle').innerHTML;
	    		var bsId = "new";
	       	}
	       	var overviewLabel = $('overviewLabel').innerHTML;
	       	var cancelLabel = $('cancelLabel').innerHTML;
	       	
			YAHOO.namespace("global.build.stat.configuration");
			YAHOO.global.build.stat.configuration._buttons = [];
		    YAHOO.global.build.stat.configuration.handleOverview = function() {
		    	// If error resides in form, don't do anything here !
		    	if(isDivErrorPresentInForm($('createBuildStat_'+bsId))){ return; }
		    	
				YAHOO.namespace("global.build.stat.overview");
				
				var title = $(bsId+'_title').value;
				var width = $(bsId+'_buildStatWidth').value;
				var height = $(bsId+'_buildStatHeight').value;
				var scale = $(bsId+'_historicScale').value;
				var length = $(bsId+'_historicLength').value;
				var jobFilter = $(bsId+'_jobFilter').value;
				var successShown = $(bsId+'_successShown').checked;
				var failuresShown = $(bsId+'_failuresShown').checked;
				var unstablesShown = $(bsId+'_unstablesShown').checked;
				var abortedShown = $(bsId+'_abortedShown').checked;
				var notBuildsShown = $(bsId+'_notBuildsShown').checked;
				var buildStatusesShown = $(bsId+'_buildStatusesShown').checked;
				var totalBuildTimeShown = $(bsId+'_totalBuildTimeShown').checked;
				var averageBuildTimeShown = $(bsId+'_averageBuildTimeShown').checked;
				var yAxisChartType = $(bsId+'_yAxisChartType').value;

				var overviewContent = '<img src="'+rootURL+'/plugin/global-build-stats/createChart?';
				overviewContent += 'title='+title;
				overviewContent += '&buildStatWidth='+width;
				overviewContent += '&buildStatHeight='+height;
				overviewContent += '&historicLength='+length;
				overviewContent += '&historicScale='+scale;
				overviewContent += '&jobFilter='+jobFilter;
				overviewContent += '&successShown='+successShown;
				overviewContent += '&failuresShown='+failuresShown;
				overviewContent += '&unstablesShown='+unstablesShown;
				overviewContent += '&abortedShown='+abortedShown;
				overviewContent += '&notBuildsShown='+notBuildsShown;
				overviewContent += '&yAxisChartType='+yAxisChartType;
				overviewContent += '&buildStatusesShown='+buildStatusesShown;
				overviewContent += '&totalBuildTimeShown='+totalBuildTimeShown;
				overviewContent += '&averageBuildTimeShown='+averageBuildTimeShown;
				overviewContent += '" />';

				YAHOO.global.build.stat.overview.modalPopup =  
			        new YAHOO.widget.Panel("buildStatOverview",   
			            { width:width+"px",
			              fixedcenter:true,  
			              close:true,  
			              draggable:true,
			              zindex:8, 
			              modal:true
			            }
			        ); 
				YAHOO.global.build.stat.overview.modalPopup.setHeader(overviewLabel);
				YAHOO.global.build.stat.overview.modalPopup.setBody(overviewContent);
				YAHOO.global.build.stat.overview.modalPopup.render(document.body);
		    }
		    YAHOO.global.build.stat.configuration.handleSubmit = function() {
		    	// If error resides in form, don't do anything here !
		    	if(isDivErrorPresentInForm($('createBuildStat_'+bsId))){ return; }
		    	
				ajaxCall('form', 'createBuildStat_'+bsId, function(ret) {
				  	var buildStatConfig = eval('('+ret.responseText+')');
				  	if(modificationMode){
		    			BUILD_STAT_CONFIGS.update(bsId, buildStatConfig);
				  	} else {
			    		BUILD_STAT_CONFIGS.add(buildStatConfig);
				  	}
			        YAHOO.global.build.stat.configuration.modalPopup.hide();
			        CURRENT_FORM = null;
				});
		    } 
		    YAHOO.global.build.stat.configuration.handleCancel = function() { 
		        YAHOO.global.build.stat.configuration.modalPopup.hide(); 
		        CURRENT_FORM = null;
		    }
			YAHOO.global.build.stat.configuration.modalPopup =  
		        new YAHOO.widget.Panel("buildStatConfigForm",   
		            { width:"720px",
		              fixedcenter:true,  
		              close:false,  
		              draggable:false,  
		              zindex:4, 
		              modal:true
		            }
		        ); 
		        
			content = this.getHTMLForBuildStatConfigForm();
			YAHOO.global.build.stat.configuration.modalPopup.setHeader(popupTitle);
			YAHOO.global.build.stat.configuration.modalPopup.setBody(content); 
		    YAHOO.global.build.stat.configuration.modalPopup.setFooter('<span id="panelFooter" class="button-group"></span>'); 
		    YAHOO.global.build.stat.configuration.modalPopup.showEvent.subscribe(function() { 
		        if (this._buttons.length == 0) { 
		            this._buttons[0] = new YAHOO.widget.Button({ 
		                type: 'button', 
		                label: overviewLabel, 
		                container: 'panelFooter' 
		            }); 
		            this._buttons[0].on('click', YAHOO.global.build.stat.configuration.handleOverview); 
		            this._buttons[1] = new YAHOO.widget.Button({ 
		                type: 'button', 
		                label: submitLabel, 
		                container: 'panelFooter' 
		            }); 
		            this._buttons[1].on('click', YAHOO.global.build.stat.configuration.handleSubmit); 
		            this._buttons[2] = new YAHOO.widget.Button({ 
		                type: 'button', 
		                label: cancelLabel, 
		                container: 'panelFooter' 
		            }); 
		            this._buttons[2].on('click', YAHOO.global.build.stat.configuration.handleCancel); 
		        }
		    }, YAHOO.global.build.stat.configuration, true); 
		    YAHOO.global.build.stat.configuration.modalPopup.renderEvent.subscribe(function() {
		    	CURRENT_FORM.initForm();
		    }, YAHOO.global.build.stat.configuration, true); 
			YAHOO.global.build.stat.configuration.modalPopup.render(document.body);
		},

		getHTMLForBuildStatConfigForm: function(){
			var currentContext = createTemplateContext(this.buildStatConf);
			
			if(this.isModificationMode()){
				var	regenerateIdBlockTemplate = new Template(getTemplateContent('regenerateIdBlockTemplate'));
				var regenerateIdBlock = regenerateIdBlockTemplate.evaluate(currentContext);
			} else {
				var regenerateIdBlock = "";
			}
			
			currentContext = jsonConcat(currentContext, { regenerateIdBlock: regenerateIdBlock});
			
			// Generating content for creation/update form
			var formBlockTemplate = new Template(getTemplateContent('formBlockTemplate'));
			var formBlock = formBlockTemplate.evaluate(currentContext);
			
			return formBlock;
		}

	};
	var CURRENT_FORM = null;
	
	chartLengthUnits = new Array();
	
	// Called after button "initialize stats" is clicked
	function initializeStats(){
		ajaxCall('link', 'recordBuildInfos', function(transport) {
			$('initializeStatsMessage').style.display = "inline";
		});
	}

	function jsonConcat(o1, o2) {
		for (var key in o2) {
			o1[key] = o2[key];
		}
		return o1;
	}

	function getBuildStatConfigId(buildStatConfigId){
		if(buildStatConfigId == null){
			return "new";
		} else {
			return buildStatConfigId;
		}
	}
	
	function ajaxCall(callType, param, successCallback){
		ajaxCall(callType, param, successCallback, false);
	}
	function ajaxCall(callType, param, successCallback, skipLoading){
		
		if(!skipLoading){
			YAHOO.namespace("global.build.stat.wait");
			YAHOO.global.build.stat.wait.modalPopup =  
		        new YAHOO.widget.Panel("wait",   
		            { width:"240px",
		              fixedcenter:true,  
		              close:false,  
		              draggable:false,  
		              zindex:4, 
		              modal:true
		            }
		        ); 
		        
			YAHOO.global.build.stat.wait.modalPopup.setHeader($('waitMessage').innerHTML);
			YAHOO.global.build.stat.wait.modalPopup.setBody(getTemplateContent('loadingTemplate')); 
		}
				
		var ajaxCallParams = {
			onSuccess: function(ret) {
				successCallback.call(null, ret);
				if(!skipLoading){
					YAHOO.global.build.stat.wait.modalPopup.hide();
				}
			},/* For unknown reasons, an exception is thrown after the onSuccess process .. :(
			onException: function(transport, ex) { 
				alert('exception : '+ex);
				if(!skipLoading){
					YAHOO.global.build.stat.wait.modalPopup.hide();
				}
			    throw ex;
			},*/
			onFailure: function(transport) { 
				alert('failure : '+Object.toJSON(transport));
				if(!skipLoading){
					YAHOO.global.build.stat.wait.modalPopup.hide();
				}
			}
		};
		
		YAHOO.global.build.stat.wait.modalPopup.render(document.body);
		if(callType == 'form'){
			$(param).request(ajaxCallParams);
		} else {
			new Ajax.Request(param, ajaxCallParams);
		}
	}	

	// For some unknown reasons, on firefox, some #{XXX} template variables a replaced by #%7BXXX%7D :(
	function getTemplateContent(templateId){
		var content = $(templateId).innerHTML;
		content = content.replace(new RegExp("%7B", "g"), "{");
		content = content.replace(new RegExp("%7D", "g"), "}");
		return content;
	}

	function createTemplateContext(buildStatConfiguration){
		if(buildStatConfiguration==null || buildStatConfiguration.length == 0){
			// Creating context for creation
			var currentContext = {
				rootURL: rootURL, 
				formAction: "addBuildStatConfiguration", 
				buildStatId: getBuildStatConfigId(null),
				currentTime: new Date().getTime(),
				BUILD_STAT_CONTAINER_ID_PREFIX: BUILD_STAT_CONTAINER_ID_PREFIX,
				CDATAEndAndScript: "]]"+">"+"</"+"script"+">"
			};
		} else {
			// Creating context for update
			var currentContext = jsonConcat(buildStatConfiguration, {
				rootURL: rootURL, 
				formAction: "updateBuildStatConfiguration", 
				buildStatId: getBuildStatConfigId(buildStatConfiguration.id),
				currentTime: new Date().getTime(),
				BUILD_STAT_CONTAINER_ID_PREFIX: BUILD_STAT_CONTAINER_ID_PREFIX,
				CDATAEndAndScript: "]]"+">"+"</"+"script"+">"
			});
		}
		
		return currentContext;
	}
	
	var BUILD_STAT_CONFIGS = new BuildStatConfigs();
	new Event.observe(window, 'load', function(){
		ajaxCall('link', rootURL+'/plugin/global-build-stats/api/json?depth=2', function(ret) {
		  	  var buildStat = eval('('+ret.responseText+')');
		  	  for(i=0; i<buildStat.buildStatConfigs.length; i++){
		  	  	var config = buildStat.buildStatConfigs[i];
		  	  	BUILD_STAT_CONFIGS.add(config);
		  	  }
		});
	});
	]]></script>
	<script type="text/javascript">
		<j:forEach var="historicScale" items="${it.historicScales}" varStatus="status">
		chartLengthUnits[${status.index}] = "${historicScale}";</j:forEach>
		FIELD_FILTER_ALL = "${FIELD_FILTER_ALL}";
		FIELD_FILTER_REGEX = "${FIELD_FILTER_REGEX}";
	</script>
  </l:header>


  <l:main-panel>
    <h1><img src="${rootURL}/plugin/global-build-stats/icons/global-build-stats.png" /> ${%Global Build Stats} </h1>
    
    <div id="buildStatActionSpinner" class="spinner" style="display: none" />
    <span id="buildStatActionValidationMessage" style="color: rgb(52, 101, 0); display: none;"></span>
    <span id="buildStatActionErrorMessage" class="error" style="display: none;"></span>
	
    <div id="errors">
	    <j:forEach var="error" items="${requestScope['errors']}">
	    ${error.renderHtml()}
	    </j:forEach>
    </div>

	<hr />
	<div style="display:none" id="jsTemplates">
		<div id="loadingTemplate">
			<img src="${rootURL}/plugin/global-build-stats/icons/loading.gif" />
		</div>
		<span id="updateSubmitLabel">${%Update build stat configuration}</span>
		<span id="updatePopupTitle">${%Updating build stat configuration}</span>
		<span id="createSubmitLabel">${%Create new chart}</span>
		<span id="createPopupTitle">${%Adding new chart}</span>
		<span id="overviewLabel">${%Overview}</span>
		<span id="cancelLabel">${%Cancel}</span>
		<span id="waitMessage">${%Loading, please wait...}</span>
		<span id="deletionConfirmationMessage">${%Are you sure to delete this build stat configuration ?}</span>
		<div id="buildStatConfigWithoutContainerTemplate">
    		<a name="buildStat_#{id}" />
    		#{buildStatImage}
			<a href="#buildStat_#{id}" id="edit_#{id}" onclick="new BuildStatConfigForm('#{id}').displayBuildStatConfigForm();">
				<img src="${rootURL}/plugin/global-build-stats/icons/save-new.png" height="36" /><br/>
			</a>
			<a href="#" onclick="BUILD_STAT_CONFIGS.moveBuildStat('#{id}', 'up');" id="moveUp_#{id}">
				<img src="${rootURL}/plugin/global-build-stats/icons/up.png" height="36" /><br/>
			</a>
			<a href="#" onclick="BUILD_STAT_CONFIGS.moveBuildStat('#{id}', 'down');" id="moveDown_#{id}">
				<img src="${rootURL}/plugin/global-build-stats/icons/down.png" height="36" /><br/>
			</a>
			<a href="#buildStat_#{id}" onclick="deleteBuildStat('#{id}');">
				<img src="${rootURL}/plugin/global-build-stats/icons/stop.png" height="36" /><br/>
			</a>
		</div>
		<div id="regenerateIdBlockTemplate">
			${%Identifier} : 
			<input type="radio" id="#{buildStatId}_regenerateId_no" name="regenerateId" value="false" checked="checked" />#{buildStatId}
			<input type="radio" id="#{buildStatId}_regenerateId_yes" name="regenerateId" value="true" />${%Regenerate a new identifier}
			<br/>
		</div>
		<div id="formBlockTemplate">
		   <form name="createBuildStat_#{buildStatId}" action="#{formAction}" method="post" class="globalBuildStatsForm"
		    	  id="createBuildStat_#{buildStatId}" onsubmit="return !isDivErrorPresentInForm(this);">
		      #{regenerateIdBlock}
		      ${%Title} : <input type="text" id="#{buildStatId}_title" name="title"
		      				 value="#{buildStatTitle}"
		      				 checkUrl="'${rootURL}/plugin/global-build-stats/checkTitle?value='+escape(field.value)"
		      				 onblur="validateField(this);" onchange="validateField(this);"
		      		  /><span class="validation-error-area" style="display:inline-block;"></span><br/>
		      ${%Chart Width * Height} :
		      <input type="text" id="#{buildStatId}_buildStatWidth" name="buildStatWidth" 
		      		 size="3" value="#{buildStatWidth}"
		      		 checkUrl="'${rootURL}/plugin/global-build-stats/checkBuildStatWidth?value='+escape(field.value)"
		      		 onblur="validateField(this);" onchange="validateField(this);"
		      		 validationErrorAreaClassName="width-validation-error-area"
		      />
		      <span class="width-validation-error-area" style="display:inline-block;"></span>
		      * 
		      <input type="text" id="#{buildStatId}_buildStatHeight" name="buildStatHeight" 
		      		 size="3" value="#{buildStatHeight}"
		      		 checkUrl="'${rootURL}/plugin/global-build-stats/checkBuildStatHeight?value='+escape(field.value)"
		      		 onblur="validateField(this);" onchange="validateField(this);"
		      		 validationErrorAreaClassName="height-validation-error-area"
		      />
		      <span class="height-validation-error-area" style="display:inline-block;"></span><br/>
		      ${%Chart time scale} :
		      <select id="#{buildStatId}_historicScale" 
		      		  name="historicScale" checkUrl="'${rootURL}/plugin/global-build-stats/checkHistoricScale?value='+escape(field.value)"
		      		  onchange="validateField(this); CURRENT_FORM.changeChartLengthUnit(this.value);">
				<j:forEach var="historicScale" items="${it.historicScales}" varStatus="status">
					<option value="${historicScale}">${historicScale.label}</option>
				</j:forEach>
		      </select><span class="validation-error-area" style="display:inline-block;"></span><br/>
		      ${%Chart time length} :
			   <input type="text" id="#{buildStatId}_historicLength" name="historicLength" 
			  		 size="3" value="#{historicLength}"
		      		 checkUrl="'${rootURL}/plugin/global-build-stats/checkHistoricLength?value='+escape(field.value)"
		      		 onblur="validateField(this);" onchange="validateField(this);"
			   />
			  <j:forEach var="historicScale" items="${it.historicScales}" varStatus="status">
				<span id="#{buildStatId}_${historicScale}" style="display:none">${historicScale.unitLabel}</span>
			  </j:forEach>
		      <span class="validation-error-area" style="display:inline-block;"></span><br/>
		      ${%Filters} :
		      <ul style="margin-top: 4px;">
		      	<li>
			      ${%Job filtering} : <input type="radio" id="#{buildStatId}_jobFilteringType_ALL" checked="checked" name="jobFilteringType" value="${FIELD_FILTER_ALL}" onchange="fieldFilterTypeSelected(this.value, '#{buildStatId}_jobNameRegex', '#{buildStatId}_jobFilter');" />${%ALL Jobs}
			      <input type="radio" id="#{buildStatId}_jobFilteringType_REGEX" name="jobFilteringType" value="${FIELD_FILTER_REGEX}" onchange="fieldFilterTypeSelected(this.value, '#{buildStatId}_jobNameRegex', '#{buildStatId}_jobFilter');" />
			      ${%Job name regex} :
			      <input type="text" id="#{buildStatId}_jobNameRegex" 
			      		 disabled="true" name="jobNameRegex" size="10"
			      		 onblur="$('#{buildStatId}_jobFilter').value=FIELD_FILTER_REGEX+'('+this.value+')';" 
			      />
			      <input id="#{buildStatId}_jobFilter" type="hidden" name="jobFilter" value="#{jobFilter}" />
		      	</li>
		      	<li>
			      ${%Statuses taken into account} :
			      <input type="checkbox" value="true" id="#{buildStatId}_successShown" name="successShown" checked="checked" />${%Success}
			      <input type="checkbox" value="true" id="#{buildStatId}_failuresShown" name="failuresShown" checked="checked" />${%Failures}
			      <input type="checkbox" value="true" id="#{buildStatId}_unstablesShown" name="unstablesShown" checked="checked" />${%Unstables}
			      <input type="checkbox" value="true" id="#{buildStatId}_abortedShown" name="abortedShown" checked="checked" />${%Aborted}
			      <input type="checkbox" value="true" id="#{buildStatId}_notBuildsShown" name="notBuildsShown" />${%Not Build}
		      	</li>
		      </ul>
		      ${%Elements displayed on chart} :
		      <ul style="margin-top: 4px;">
		      	<li>
			      <input type="checkbox" value="true" id="#{buildStatId}_buildStatusesShown" name="buildStatusesShown" checked="checked" />
			      ${%Build statuses with Y Axis type} :
			      <select id="#{buildStatId}_yAxisChartType" 
			      		  name="yAxisChartType" checkUrl="'${rootURL}/plugin/global-build-stats/checkYAxisChartType?value='+escape(field.value)"
			      		  onchange="validateField(this);">
					  <j:forEach var="yAxisChartType" items="${it.yAxisChartTypes}" varStatus="status">
					  	<option value="${yAxisChartType}">${yAxisChartType.label}</option>
					  </j:forEach>
			      </select><span class="validation-error-area" style="display:inline-block;"></span>
		      	</li>
		      	<li>
			      <input type="checkbox" value="true" id="#{buildStatId}_totalBuildTimeShown" name="totalBuildTimeShown" />
			      ${%Total build time}
		      	</li>
		      	<li>
			      <input type="checkbox" value="true" id="#{buildStatId}_averageBuildTimeShown" name="averageBuildTimeShown" />
			      ${%Average build time}
		      	</li>
		      </ul>
		      <input type="hidden" name="buildStatId" value="#{buildStatId}" />
		    </form>
		</div>
	</div>
	<strong>${%Statistics}</strong><br/>
	<div id="buildStatConfigsContainer">
	<j:if test="${empty(it.buildStatConfigsArrayed)}">
		<em>${%No statistics for now on ...}</em>
	</j:if>
	</div>
	
	<hr style="clear:both;"/>
	<a name="Initialize" />
	<strong>${%Data Initialization}</strong><br/>
    <em>
      ${%Clic button below to initialize build statistics}<br/>
      ${%Job results read will be merged with already recorded job results.}<br/>
    </em>
    <span id="initializeStatsMessage" style="color: rgb(52, 101, 0); display: none;">
    	<strong>${%Data successfully initialized !}</strong>&#160;
		<j:if test="${!empty(it.buildStatConfigsArrayed)}"><a href="#" onclick="window.location.href = '';">${%Refresh page}</a></j:if>
		<br/>
    </span>
    <input type="button" class="submit-button" onclick="initializeStats();" value="${%Initialize stats}" />
    <div id="initializeStatsSpinner" class="spinner" style="display: none" />
  </l:main-panel>
</l:layout>
</j:jelly>