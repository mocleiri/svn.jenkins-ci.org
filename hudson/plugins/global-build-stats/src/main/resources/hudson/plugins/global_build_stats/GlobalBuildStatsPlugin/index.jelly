<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:i="jelly:fmt">
<l:layout title="${%Global Build Stats}" permission="${it.requiredPermission}">
       
  <l:side-panel>
    <l:tasks>
      <l:task icon="images/24x24/up.gif" href="${rootURL}/" title="${%Back to Dashboard}" />
    </l:tasks>
  </l:side-panel>

  <l:main-panel>

	<script type="text/javascript"><![CDATA[
	// Reinventing the wheel since in hudson-behavior.js we MUST
	// use a <tr> and <td> field for the validation-error-area container :(
	// So registerValidator implementation is recopied here
	function validateField(field){
	    var validationErrorAreaClassName = field.getAttribute("validationErrorAreaClassName");
	    if (!validationErrorAreaClassName) validationErrorAreaClassName = "validation-error-area";
	    
	    var targetValidationError = findFollowingSPAN(field, validationErrorAreaClassName);
	    var targetUrl = function() {
	        return eval(field.getAttribute("checkUrl"));
	    };
	    var url = targetUrl();
	
	    var method = field.getAttribute("checkMethod");
	    if (!method) method = "get";
		
	    FormChecker.sendRequest(url, {
	        method : method,
	        onComplete : function(x) {
	            targetValidationError.innerHTML = x.responseText;
	        }
	    });
	}
	
	function findFollowingSPAN(input, className) {
	    var elem = input.nextSibling;
	    while (elem.tagName != "SPAN" || elem.className != className)
	        elem = elem.nextSibling;
	
	    return elem;
	}
	
	function isDivErrorPresentInForm(myForm){
		var elems = myForm.getElementsByClassName("error");
		var divErrorPresent = false;
		var i=0;
		while(i<elems.length && !divErrorPresent){
			divErrorPresent = (elems[i].tagName == "DIV");
			i++;
		}
		return divErrorPresent;
	}
	
	chartLengthUnits = new Array();
	function changeChartLengthUnit(formId, scale){
		for(var i=0; i<chartLengthUnits.length; i++){
		    if(scale == chartLengthUnits[i]){
		    	document.getElementById(formId+'_'+chartLengthUnits[i]).style.display = "inline";
		    } else {
		    	document.getElementById(formId+'_'+chartLengthUnits[i]).style.display = "none";
		    }
		}
	}
	
	function selectionOption(selectElement, optionValue){
		for (var i=0; i<selectElement.options.length; i++) {
			selectElement.options[i].selected = selectElement.options[i].value == optionValue;
		}
		selectElement.onchange();
	}
	
	function jobFilterTypeSelected(buildStatId, selectedType){
		if('ALL' == selectedType){
			document.getElementById(buildStatId+'_jobNameRegex').disabled = true;
			document.getElementById(buildStatId+'_jobFilter').value = 'ALL';
		} else if('jobNameRegex' == selectedType){
			document.getElementById(buildStatId+'_jobNameRegex').disabled = false;
			document.getElementById(buildStatId+'_jobFilter').value = 'jobNameRegex('+document.getElementById(buildStatId+'_jobNameRegex').value+')';
		}
	}
	
	function initializeRegexField(buildStatId, jobFilterRegex){
		var extractingRegex = new RegExp("^jobNameRegex\\((.*)\\)$", "g");
		if(extractingRegex.test(jobFilterRegex)){
			extractingRegex.exec(jobFilterRegex);
			var regexToPut = RegExp.$1;
			document.getElementById(buildStatId+'_jobNameRegex').value = regexToPut;
		}
	}
	
	function initializeForms(){
		var fieldsToRefresh = new Array("title", "buildStatWidth", "buildStatHeight", "historicScale",
										"historicLength");
		for(var i=0; i<fieldsToRefresh.length; i++){
			fields = document.getElementsByName(fieldsToRefresh[i]);
			for(var j=0; j<fields.length; j++){
				fields[j].onchange();
			}
		}
	}
	
	function initializeStats(){
		$('initializeStatsSpinner').style.display = "inline";
		new Ajax.Request('recordBuildInfos', {
		  method: 'get',
		  onSuccess: function(transport) {
			$('initializeStatsSpinner').style.display = "none";
			$('initializeStatsMessage').style.display = "inline";
		  }
		});
	}
	
	// Hudson hack allowing to override the form.onsubmit generated by hudson-behaviour with
	// a divError check
	var myHudsonRules = {
		"FORM" : function(form){
	        form.onsubmit = function() { return !isDivErrorPresentInForm(this); };
	        form = null; // memory leak prevention
		}
	};
	
	Behaviour.register(Object.extend(hudsonRules, myHudsonRules));
	Behaviour.apply();
	]]></script>
	<script type="text/javascript">
	<j:forEach var="historicScale" items="${it.historicScales}" varStatus="status">
	chartLengthUnits[${status.index}] = "${historicScale}";</j:forEach>
	</script>
	
    <h1><img src="${rootURL}/plugin/global-build-stats/icons/global-build-stats.png" /> Global Build Stats </h1>
    <hr />
    
    <a href="#CreateNew">Create new chart</a><br/>
    <a href="#Initialize">Data Initialization</a><br/>
    
    <div id="errors">
	    <j:forEach var="error" items="${requestScope['errors']}">
	    ${error.renderHtml()}
	    </j:forEach>
    </div>

	<hr />
	<strong>Statistics</strong><br/>
	<j:if test="${empty(it.buildStatConfigs)}">
		<em>No statistics for now on ...</em>
	</j:if>
    <j:forEach var="buildStatConfig" items="${it.buildStatConfigs}" varStatus="status">
    	<div style="clear:left;">
    		<a name="buildStat_${status.index}" />
			<img style="display:inline; float:left; margin-bottom: 10px; margin-right: 10px;"
				src="${rootURL}/plugin/global-build-stats/createChart?title=${buildStatConfig.buildStatTitle}&amp;buildStatWidth=${buildStatConfig.buildStatWidth}&amp;buildStatHeight=${buildStatConfig.buildStatHeight}&amp;historicLength=${buildStatConfig.historicLength}&amp;historicScale=${buildStatConfig.historicScale}&amp;successShown=${buildStatConfig.successShown}&amp;failuresShown=${buildStatConfig.failuresShown}&amp;unstablesShown=${buildStatConfig.unstablesShown}&amp;abortedShown=${buildStatConfig.abortedShown}&amp;notBuildsShown=${buildStatConfig.notBuildShown}&amp;jobFilter=${buildStatConfig.jobFilter}" 
				lazymap="${rootURL}/plugin/global-build-stats/createChartMap?title=${buildStatConfig.buildStatTitle}&amp;buildStatWidth=${buildStatConfig.buildStatWidth}&amp;buildStatHeight=${buildStatConfig.buildStatHeight}&amp;historicLength=${buildStatConfig.historicLength}&amp;historicScale=${buildStatConfig.historicScale}&amp;successShown=${buildStatConfig.successShown}&amp;failuresShown=${buildStatConfig.failuresShown}&amp;unstablesShown=${buildStatConfig.unstablesShown}&amp;abortedShown=${buildStatConfig.abortedShown}&amp;notBuildsShown=${buildStatConfig.notBuildShown}&amp;jobFilter=${buildStatConfig.jobFilter}" /><br/>
			
			<a href="#buildStat_${status.index}" id="edit_${status.index}" onclick="document.getElementById('edit_${status.index}').style.display='none'; document.getElementById('global_${status.index}').style.display='block';">
				<img src="${rootURL}/plugin/global-build-stats/icons/save-new.png" height="36" />
			</a>
		    <j:if test="${! status.first}">
				<a href="#buildStat_${status.index}" onclick="window.location='${rootURL}/plugin/global-build-stats/moveUpConf?buildStatId=${status.index}';">
					<img src="${rootURL}/plugin/global-build-stats/icons/up.png" height="36" />
				</a>
			</j:if>
		    <j:if test="${! status.last}">
				<a href="#buildStat_${status.index}" onclick="window.location='${rootURL}/plugin/global-build-stats/moveDownConf?buildStatId=${status.index}';">
					<img src="${rootURL}/plugin/global-build-stats/icons/down.png" height="36" />
				</a>
			</j:if>
			<a href="#buildStat_${status.index}" onclick="if(confirm('Are you sure to delete this build stat configuration ?')){ window.location='${rootURL}/plugin/global-build-stats/deleteConfiguration?buildStatId=${status.index}'; }">
				<img src="${rootURL}/plugin/global-build-stats/icons/stop.png" height="36" />
			</a>
			<div id="global_${status.index}" style="display:none">
				<j:set var="formAction" value="updateBuildStatConfiguration" />
				<j:set var="formSubmitLabel" value="Update build stat configuration" />
				<j:set var="currentBuildStatConfig" value="${buildStatConfig}" />
				<j:set var="buildStatId" value="${status.index}" />
			    <st:include page="/hudson/plugins/global_build_stats/GlobalBuildStatsPlugin/form.jelly" />
		    </div>
		</div>
	</j:forEach>
	
	<hr style="clear:both;" />
	<a name="CreateNew" />
	<strong>Adding new chart</strong><br/>
	<j:set var="formAction" value="addBuildStatConfiguration" />
	<j:set var="formSubmitLabel" value="Create new chart" />
	<j:set var="currentBuildStatConfig" value="" />
	<j:set var="buildStatId" value="new" />
    <st:include page="/hudson/plugins/global_build_stats/GlobalBuildStatsPlugin/form.jelly" />

	<script type="text/javascript"><![CDATA[
	initializeForms();
	]]></script>
	<hr />
	<a name="Initialize" />
	<strong>Data Initialization</strong><br/>
    <em>
      Clic button below to initialize build statistics<br/>
      Job results read will be merged with already recorded job results.<br/>
    </em>
    <span id="initializeStatsMessage" style="color: rgb(52, 101, 0); display: none;">
    	<strong>Data successfully initialized !</strong>&#160;
		<j:if test="${!empty(it.buildStatConfigs)}"><a href="#" onclick="window.location.href = '';">Refresh page</a></j:if>
		<br/>
    </span>
    <input type="button" class="submit-button" onclick="initializeStats();" value="Initialize stats" />
    <div id="initializeStatsSpinner" class="spinner" style="display: none" />
	
  </l:main-panel>
</l:layout>
</j:jelly>