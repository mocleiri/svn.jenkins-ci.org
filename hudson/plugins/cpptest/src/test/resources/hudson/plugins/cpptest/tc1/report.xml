<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession time="04/02/10 06:32:29" toolName="C++test" toolVer="7.2.11.35">
    <Authors>
        <Author id="dev1" name="unknown" />
    </Authors>
    
        <Locations>
            <Loc fsPath="C:\Program Files\Parasoft\C++test7.2\Examples\ATM\Account.cxx" loc="/ATM/ATM/Account.cxx" />
            <Loc fsPath="C:\Program Files\Parasoft\C++test7.2\Examples\ATM\ATM.cxx" loc="/ATM/ATM/ATM.cxx" />
            <Loc fsPath="C:\Program Files\Parasoft\C++test7.2\Examples\ATM\include\BaseDisplay.hxx" loc="/ATM/ATM/include/BaseDisplay.hxx" />
            <Loc fsPath="C:\Program Files\Parasoft\C++test7.2\Examples\ATM\vc6\StdAfx.h" loc="/ATM/ATM/vc6/StdAfx.h" />
            <Loc fsPath="C:\Program Files\Parasoft\C++test7.2\Examples\ATM\BaseDisplay.cxx" loc="/ATM/ATM/BaseDisplay.cxx" />
            <Loc fsPath="C:\Program Files\Parasoft\C++test7.2\Examples\ATM\include\Bank.hxx" loc="/ATM/ATM/include/Bank.hxx" />
            <Loc fsPath="C:\Program Files\Parasoft\C++test7.2\Examples\ATM\include\ATM.hxx" loc="/ATM/ATM/include/ATM.hxx" />
            <Loc fsPath="C:\Program Files\Parasoft\C++test7.2\Examples\ATM\Bank.cxx" loc="/ATM/ATM/Bank.cxx" />
            <Loc fsPath="C:\Program Files\Parasoft\C++test7.2\Examples\ATM\include\Account.hxx" loc="/ATM/ATM/include/Account.hxx" />
        </Locations>
    
    
    <VersionInfos>
        <StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationProjectInfo" ver="2" />
        <StorageInfo ownerId="com.parasoft.xtest.checkers.api.generation" resultId="IGenerationInfo" ver="2" />
        <StorageInfo ownerId="com.parasoft.xtest.checkers.api.codereview" resultId="ICodeReviewScannerInfo" ver="2" />
        <StorageInfo ownerId="com.parasoft.xtest.checkers.api.codereview" resultId="ICodeReviewUndefinedAuthorsInfo" ver="1" />
        <StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="InsureViolation" ver="3" />
        <StorageInfo ownerId="com.parasoft.xtest.checkers.api.execution" resultId="IExecutionViolation" ver="2" />
        <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" />
        <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" />
        <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" />
        <StorageInfo ownerId="com.parasoft.xtest.checkers.api.scope" resultId="IScopeProjectInfo" ver="3" />
    </VersionInfos>
    <Scope>
        <ProjectInformations>
            <ScopeProjectInfo fltFiles="16" fltLns="447" project="/ATM" totFiles="16" totLns="447" />
        </ProjectInformations>
    </Scope>
    <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:01:11">
        <Goal mode="1" name="Static" />
        <Projects>
            <Project checkedFiles="10" checkedLns="291" name="ATM" qfixErrs="0" suppErrs="0" totErrs="82" totFiles="10" totLns="291" />
        </Projects>
        
  <StdViols>
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'bank' as const" locType="sr" hash="-318977119" ln="4" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="4" locStartPos="15" locEndLn="4" locEndPos="16" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'display' as const" locType="sr" hash="-318977119" ln="4" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="4" locStartPos="34" locEndLn="4" locEndPos="35" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'accountNumber' as const" locType="sr" hash="-318977119" ln="10" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="10" locStartPos="26" locEndLn="10" locEndPos="27" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'password' as const" locType="sr" hash="-318977119" ln="10" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="10" locStartPos="48" locEndLn="10" locEndPos="49" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'int' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-318977119" ln="10" locStartln="10" locStartPos="22" locEndLn="10" locEndPos="23" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Assignment to 'myCurrentAccount' used in expression that yield a Boolean value" locType="sr" hash="-318977119" ln="12" rule="MISRA2008-6_2_1" tool="c++test" urgent="true" auth="unknown" locStartln="12" locStartPos="11" locEndLn="12" locEndPos="12" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="The operand of logical operator '!' has 'Account *' type instead of 'bool' type" locType="sr" hash="-318977119" ln="12" rule="MISRA2008-5_3_1" tool="c++test" urgent="true" auth="unknown" locStartln="12" locStartPos="9" locEndLn="12" locEndPos="10" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'amount' as const" locType="sr" hash="-318977119" ln="18" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="18" locStartPos="54" locEndLn="18" locEndPos="55" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'request' as const" locType="sr" hash="-318977119" ln="18" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="18" locStartPos="38" locEndLn="18" locEndPos="39" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-318977119" ln="18" locStartln="18" locStartPos="47" locEndLn="18" locEndPos="48" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="An expression of type 'Account *' is used in the condition of statement" locType="sr" hash="-318977119" ln="20" rule="MISRA2008-5_0_13" tool="c++test" urgent="true" auth="unknown" locStartln="20" locStartPos="4" locEndLn="20" locEndPos="5" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Conditional statement 'if' in a function 'fillUserRequest' should be followed by a block" locType="sr" hash="-318977119" ln="20" rule="MISRA2008-6_4_1" tool="c++test" urgent="true" auth="unknown" locStartln="20" locStartPos="4" locEndLn="20" locEndPos="5" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="There is no 'default' clause in switch statement" locType="sr" hash="-318977119" ln="21" rule="MISRA2008-6_4_3_c" tool="c++test" urgent="true" auth="unknown" locStartln="21" locStartPos="8" locEndLn="21" locEndPos="9" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="There is no 'default' clause in switch statement" locType="sr" hash="-318977119" ln="21" rule="MISRA2008-6_4_6" tool="c++test" urgent="true" auth="unknown" locStartln="21" locStartPos="8" locEndLn="21" locEndPos="9" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare local variable 'bal' as const" locType="sr" hash="-318977119" ln="34" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="34" locStartPos="11" locEndLn="34" locEndPos="12" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-318977119" ln="34" locStartln="34" locStartPos="4" locEndLn="34" locEndPos="5" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'amount' as const" locType="sr" hash="-318977119" ln="39" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="39" locStartPos="29" locEndLn="39" locEndPos="30" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-318977119" ln="39" locStartln="39" locStartPos="22" locEndLn="39" locEndPos="23" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare local variable 'bal' as const" locType="sr" hash="-318977119" ln="41" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="41" locStartPos="11" locEndLn="41" locEndPos="12" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-318977119" ln="41" locStartln="41" locStartPos="4" locEndLn="41" locEndPos="5" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'amount' as const" locType="sr" hash="-318977119" ln="46" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="46" locStartPos="26" locEndLn="46" locEndPos="27" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-318977119" ln="46" locStartln="46" locStartPos="19" locEndLn="46" locEndPos="20" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare local variable 'bal' as const" locType="sr" hash="-318977119" ln="48" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="48" locStartPos="11" locEndLn="48" locEndPos="12" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-318977119" ln="48" locStartln="48" locStartPos="4" locEndLn="48" locEndPos="5" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="floating-point arithmetic is not documented" locType="sr" hash="-318977119" ln="48" rule="MISRA2008-0_4_2" tool="c++test" urgent="true" auth="unknown" locStartln="48" locStartPos="43" locEndLn="48" locEndPos="44" locFile="/ATM/ATM/ATM.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'amount' as const" locType="sr" hash="-1636172050" ln="3" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="3" locStartPos="31" locEndLn="3" locEndPos="32" locFile="/ATM/ATM/Account.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-1636172050" ln="3" locStartln="3" locStartPos="0" locEndLn="3" locEndPos="1" locFile="/ATM/ATM/Account.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-1636172050" ln="3" locStartln="3" locStartPos="24" locEndLn="3" locEndPos="25" locFile="/ATM/ATM/Account.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="floating-point arithmetic is not documented" locType="sr" hash="-1636172050" ln="5" rule="MISRA2008-0_4_2" tool="c++test" urgent="true" auth="unknown" locStartln="5" locStartPos="4" locEndLn="5" locEndPos="5" locFile="/ATM/ATM/Account.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'amount' as const" locType="sr" hash="-1636172050" ln="10" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="10" locStartPos="29" locEndLn="10" locEndPos="30" locFile="/ATM/ATM/Account.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-1636172050" ln="10" locStartln="10" locStartPos="0" locEndLn="10" locEndPos="1" locFile="/ATM/ATM/Account.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-1636172050" ln="10" locStartln="10" locStartPos="22" locEndLn="10" locEndPos="23" locFile="/ATM/ATM/Account.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="floating-point arithmetic is not documented" locType="sr" hash="-1636172050" ln="12" rule="MISRA2008-0_4_2" tool="c++test" urgent="true" auth="unknown" locStartln="12" locStartPos="4" locEndLn="12" locEndPos="5" locFile="/ATM/ATM/Account.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'num' as const" locType="sr" hash="-1422048276" ln="15" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="15" locStartPos="30" locEndLn="15" locEndPos="31" locFile="/ATM/ATM/Bank.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'password' as const" locType="sr" hash="-1422048276" ln="15" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="15" locStartPos="42" locEndLn="15" locEndPos="43" locFile="/ATM/ATM/Bank.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'int' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-1422048276" ln="15" locStartln="15" locStartPos="26" locEndLn="15" locEndPos="27" locFile="/ATM/ATM/Bank.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Implicit conversion between signed and unsigned type shall not be used" locType="sr" hash="-1422048276" ln="18" rule="MISRA2008-5_0_4_a" tool="c++test" urgent="true" auth="unknown" locStartln="18" locStartPos="8" locEndLn="18" locEndPos="9" locFile="/ATM/ATM/Bank.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="C-style cast to 'Account *' type is used" locType="sr" hash="-1422048276" ln="20" rule="MISRA2008-5_2_4" tool="c++test" urgent="true" auth="unknown" locStartln="20" locStartPos="22" locEndLn="20" locEndPos="23" locFile="/ATM/ATM/Bank.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Do not use side effects expression in the right-hand operand " locType="sr" hash="-1422048276" ln="22" rule="MISRA2008-5_14_1" tool="c++test" urgent="true" auth="unknown" locStartln="22" locStartPos="8" locEndLn="22" locEndPos="9" locFile="/ATM/ATM/Bank.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="'new' operator should not be used" locType="sr" hash="-1422048276" ln="35" rule="MISRA2008-18_4_1" tool="c++test" urgent="true" auth="unknown" locStartln="35" locStartPos="27" locEndLn="35" locEndPos="28" locFile="/ATM/ATM/Bank.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare local variable 'userAccount' as const" locType="sr" hash="-1422048276" ln="35" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="35" locStartPos="13" locEndLn="35" locEndPos="14" locFile="/ATM/ATM/Bank.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-5_2_10" lang="cpp" sev="4" msg="Do not use (++) and (--) operators with other operators in an expression" tool="c++test" auth="unknown" locType="sr" hash="-1422048276" ln="36" locStartln="36" locStartPos="34" locEndLn="36" locEndPos="35" locFile="/ATM/ATM/Bank.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="'using' directive was found: namespace 'std' " locType="sr" hash="-1798372520" ln="4" rule="MISRA2008-7_3_4" tool="c++test" urgent="true" auth="unknown" locStartln="4" locStartPos="0" locEndLn="4" locEndPos="1" locFile="/ATM/ATM/BaseDisplay.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'message' as const" locType="sr" hash="-1798372520" ln="6" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="6" locStartPos="45" locEndLn="6" locEndPos="46" locFile="/ATM/ATM/BaseDisplay.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="An expression of type 'const char *' is used in the condition of statement" locType="sr" hash="-1798372520" ln="8" rule="MISRA2008-5_0_13" tool="c++test" urgent="true" auth="unknown" locStartln="8" locStartPos="4" locEndLn="8" locEndPos="5" locFile="/ATM/ATM/BaseDisplay.cxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-1798372520" ln="14" locStartln="14" locStartPos="30" locEndLn="14" locEndPos="31" locFile="/ATM/ATM/BaseDisplay.cxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="'using' directive was found: namespace 'std' " locType="sr" hash="785146300" ln="8" rule="MISRA2008-7_3_4" tool="c++test" urgent="true" auth="unknown" locStartln="8" locStartPos="0" locEndLn="8" locEndPos="1" locFile="/ATM/ATM/include/ATM.hxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="class 'ATM' is being used outside namespace" locType="sr" hash="785146300" ln="12" rule="MISRA2008-7_3_1" tool="c++test" urgent="true" auth="unknown" locStartln="12" locStartPos="6" locEndLn="12" locEndPos="7" locFile="/ATM/ATM/include/ATM.hxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="In 'UserRequest' enum either explicitly initialise only first member, or all members, or do not initialize any members at all" locType="sr" hash="785146300" ln="16" rule="MISRA2008-8_5_3" tool="c++test" urgent="true" auth="unknown" locStartln="16" locStartPos="13" locEndLn="16" locEndPos="14" locFile="/ATM/ATM/include/ATM.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'int' should not be used" tool="c++test" auth="unknown" locType="sr" hash="785146300" ln="24" locStartln="24" locStartPos="25" locEndLn="24" locEndPos="26" locFile="/ATM/ATM/include/ATM.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="785146300" ln="25" locStartln="25" locStartPos="50" locEndLn="25" locEndPos="51" locFile="/ATM/ATM/include/ATM.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="785146300" ln="30" locStartln="30" locStartPos="25" locEndLn="30" locEndPos="26" locFile="/ATM/ATM/include/ATM.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="785146300" ln="31" locStartln="31" locStartPos="22" locEndLn="31" locEndPos="23" locFile="/ATM/ATM/include/ATM.hxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="'using' directive was found: namespace 'std' " locType="sr" hash="2036829073" ln="5" rule="MISRA2008-7_3_4" tool="c++test" urgent="true" auth="unknown" locStartln="5" locStartPos="0" locEndLn="5" locEndPos="1" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="class 'Account' is being used outside namespace" locType="sr" hash="2036829073" ln="7" rule="MISRA2008-7_3_1" tool="c++test" urgent="true" auth="unknown" locStartln="7" locStartPos="6" locEndLn="7" locEndPos="7" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Constructor 'Account' allowing conversion should be made explicit" locType="sr" hash="2036829073" ln="16" rule="MISRA2008-12_1_3" tool="c++test" urgent="true" auth="unknown" locStartln="16" locStartPos="8" locEndLn="16" locEndPos="9" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Declare parameter 'initial' as const" locType="sr" hash="2036829073" ln="16" rule="MISRA2008-7_1_1" tool="c++test" urgent="true" auth="unknown" locStartln="16" locStartPos="23" locEndLn="16" locEndPos="24" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="2036829073" ln="16" locStartln="16" locStartPos="16" locEndLn="16" locEndPos="17" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Member function 'getBalance' should be declared as const" locType="sr" hash="2036829073" ln="22" rule="MISRA2008-9_3_3" tool="c++test" urgent="true" auth="unknown" locStartln="22" locStartPos="15" locEndLn="22" locEndPos="16" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="2036829073" ln="22" locStartln="22" locStartPos="8" locEndLn="22" locEndPos="9" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'int' should not be used" tool="c++test" auth="unknown" locType="sr" hash="2036829073" ln="26" locStartln="26" locStartPos="8" locEndLn="26" locEndPos="9" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-7_1_1" lang="cpp" sev="3" msg="Declare parameter 'num' as const" tool="c++test" auth="unknown" locType="sr" hash="2036829073" ln="31" locStartln="31" locStartPos="34" locEndLn="31" locEndPos="35" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'int' should not be used" tool="c++test" auth="unknown" locType="sr" hash="2036829073" ln="31" locStartln="31" locStartPos="30" locEndLn="31" locEndPos="31" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-7_1_1" lang="cpp" sev="3" msg="Declare parameter 'password' as const" tool="c++test" auth="unknown" locType="sr" hash="2036829073" ln="35" locStartln="35" locStartPos="37" locEndLn="35" locEndPos="38" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Member function 'getPassword' should be declared as const" locType="sr" hash="2036829073" ln="39" rule="MISRA2008-9_3_3" tool="c++test" urgent="true" auth="unknown" locStartln="39" locStartPos="20" locEndLn="39" locEndPos="21" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="2036829073" ln="44" locStartln="44" locStartPos="8" locEndLn="44" locEndPos="9" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="2036829073" ln="44" locStartln="44" locStartPos="23" locEndLn="44" locEndPos="24" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="2036829073" ln="46" locStartln="46" locStartPos="8" locEndLn="46" locEndPos="9" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="2036829073" ln="46" locStartln="46" locStartPos="21" locEndLn="46" locEndPos="22" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'int' should not be used" tool="c++test" auth="unknown" locType="sr" hash="2036829073" ln="50" locStartln="50" locStartPos="8" locEndLn="50" locEndPos="9" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="2036829073" ln="51" locStartln="51" locStartPos="8" locEndLn="51" locEndPos="9" locFile="/ATM/ATM/include/Account.hxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="'using' directive was found: namespace 'std' " locType="sr" hash="-118678391" ln="6" rule="MISRA2008-7_3_4" tool="c++test" urgent="true" auth="unknown" locStartln="6" locStartPos="0" locEndLn="6" locEndPos="1" locFile="/ATM/ATM/include/Bank.hxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="class 'Bank' is being used outside namespace" locType="sr" hash="-118678391" ln="9" rule="MISRA2008-7_3_1" tool="c++test" urgent="true" auth="unknown" locStartln="9" locStartPos="6" locEndLn="9" locEndPos="7" locFile="/ATM/ATM/include/Bank.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'int' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-118678391" ln="16" locStartln="16" locStartPos="28" locEndLn="16" locEndPos="29" locFile="/ATM/ATM/include/Bank.hxx" />
    <StdViol cat="MISRA2008" sev="4" lang="cpp" msg="The basic numerical type 'int' should not be used" locType="sr" hash="-118678391" ln="22" rule="MISRA2008-3_9_2" tool="c++test" urgent="true" auth="unknown" locStartln="22" locStartPos="8" locEndLn="22" locEndPos="9" locFile="/ATM/ATM/include/Bank.hxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="class 'BaseDisplay' is being used outside namespace" locType="sr" hash="-2070703729" ln="4" rule="MISRA2008-7_3_1" tool="c++test" urgent="true" auth="unknown" locStartln="4" locStartPos="6" locEndLn="4" locEndPos="7" locFile="/ATM/ATM/include/BaseDisplay.hxx" />
    <StdViol cat="MISRA2008" rule="MISRA2008-3_9_2" lang="cpp" sev="4" msg="The basic numerical type 'double' should not be used" tool="c++test" auth="unknown" locType="sr" hash="-2070703729" ln="13" locStartln="13" locStartPos="33" locEndLn="13" locEndPos="34" locFile="/ATM/ATM/include/BaseDisplay.hxx" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Usage of preprocessor directive: #if is not allowed" locType="sr" hash="144780744" ln="6" rule="MISRA2008-16_2_1_c" tool="c++test" urgent="true" auth="unknown" locStartln="6" locStartPos="0" locEndLn="6" locEndPos="0" locFile="/ATM/ATM/vc6/StdAfx.h" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Identifier '_MSC_VER' is undefined at this point" locType="sr" hash="144780744" ln="9" rule="MISRA2008-16_0_7" tool="c++test" urgent="true" auth="unknown" locStartln="9" locStartPos="4" locEndLn="9" locEndPos="5" locFile="/ATM/ATM/vc6/StdAfx.h" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Usage of preprocessor directive: #if is not allowed" locType="sr" hash="144780744" ln="9" rule="MISRA2008-16_2_1_c" tool="c++test" urgent="true" auth="unknown" locStartln="9" locStartPos="0" locEndLn="9" locEndPos="0" locFile="/ATM/ATM/vc6/StdAfx.h" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="All use of #pragma shall be documented and explained" locType="sr" hash="144780744" ln="10" rule="MISRA2008-16_6_1" tool="c++test" urgent="true" auth="unknown" locStartln="10" locStartPos="0" locEndLn="10" locEndPos="0" locFile="/ATM/ATM/vc6/StdAfx.h" />
    <StdViol cat="MISRA2008" sev="3" lang="cpp" msg="Usage of preprocessor directive: #pragma is not allowed" locType="sr" hash="144780744" ln="10" rule="MISRA2008-16_2_1_c" tool="c++test" urgent="true" auth="unknown" locStartln="10" locStartPos="0" locEndLn="10" locEndPos="0" locFile="/ATM/ATM/vc6/StdAfx.h" />
  </StdViols>

        <Supps />
        
        <FADetails />
    
        
        
        <TestedFilesDetails>
            <Total name="Suppressed / Total" supp="0" total="82">
                <Project name="ATM" supp="0" total="82">
                    <Res name="ATM" supp="0" total="46">
                        <Res loc="/ATM/ATM/Account.cxx" locType="sr" name="Account.cxx" supp="0" total="8" />
                        <Res loc="/ATM/ATM/ATM.cxx" locType="sr" name="ATM.cxx" supp="0" total="25" />
                        <Res loc="/ATM/ATM/BaseDisplay.cxx" locType="sr" name="BaseDisplay.cxx" supp="0" total="4" />
                        <Res loc="/ATM/ATM/Bank.cxx" locType="sr" name="Bank.cxx" supp="0" total="9" />
                    </Res>
                    <Res name="ATM/include" supp="0" total="31">
                        <Res loc="/ATM/ATM/include/BaseDisplay.hxx" locType="sr" name="BaseDisplay.hxx" supp="0" total="2" />
                        <Res loc="/ATM/ATM/include/Bank.hxx" locType="sr" name="Bank.hxx" supp="0" total="4" />
                        <Res loc="/ATM/ATM/include/ATM.hxx" locType="sr" name="ATM.hxx" supp="0" total="7" />
                        <Res loc="/ATM/ATM/include/Account.hxx" locType="sr" name="Account.hxx" supp="0" total="18" />
                    </Res>
                    <Res name="ATM/vc6" supp="0" total="5">
                        <Res loc="/ATM/ATM/vc6/StdAfx.h" locType="sr" name="StdAfx.h" supp="0" total="5" />
                        <Res name="StdAfx.cpp" supp="0" total="0" />
                    </Res>
                </Project>
            </Total>
        </TestedFilesDetails>
    
        <Rules>
            <RulesList>
                <Rule cat="MISRA2008" desc="Every defined function shall be called at least once" id="MISRA2008-0_1_10" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in nonvirtual functions" id="MISRA2008-0_1_11" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain unreachable code in 'else' block" id="MISRA2008-0_1_1_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2008-0_1_1_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain unreachable code in 'if/else/while/for' block" id="MISRA2008-0_1_1_c" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain unreachable code in switch statement" id="MISRA2008-0_1_1_d" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain unreachable code in 'for' loop" id="MISRA2008-0_1_1_e" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block" id="MISRA2008-0_1_1_f" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block" id="MISRA2008-0_1_1_g" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_c" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_d" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_e" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_f" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_g" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_h" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_i" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_j" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_k" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_l" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_m" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_n" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_o" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_p" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_q" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_r" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_rz" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_s" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_sz" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_t" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_u" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_v" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_w" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_x" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_y" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_z" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="MISRA2008-0_1_7" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="If a function generates error information, then that error information shall be tested" id="MISRA2008-0_3_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Use of floating-point arithmetic shall be documented" id="MISRA2008-0_4_2" sev="3">
                    <Stats authTot="3;" authUrg="3;" total="3" />
                </Rule>
                <Rule cat="MISRA2008" desc="An accessible base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRA2008-10_1_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="MISRA2008-10_3_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Each overriding virtual function shall be declared with the virtual keyword" id="MISRA2008-10_3_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="MISRA2008-10_3_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Member data in non-POD class types shall be private" id="MISRA2008-11_0_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An object's dynamic type shall not be used from the body of its constructor or destructor" id="MISRA2008-12_1_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="MISRA2008-12_1_3" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member" id="MISRA2008-12_8_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="MISRA2008-12_8_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="MISRA2008-14_5_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="MISRA2008-14_5_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="MISRA2008-14_6_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="MISRA2008-14_7_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Overloaded function templates shall not be explicitly specialized" id="MISRA2008-14_8_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="MISRA2008-15_0_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="MISRA2008-15_1_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="NULL shall not be thrown explicitly" id="MISRA2008-15_1_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound statement of a catch handler" id="MISRA2008-15_1_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_3_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" id="MISRA2008-15_3_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A class type exception shall always be caught by reference" id="MISRA2008-15_3_5" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="MISRA2008-15_3_6" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A class destructor shall not exit with an exception" id="MISRA2008-15_5_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The terminate() function shall not be called implicitly" id="MISRA2008-15_5_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="#include directives in a file shall only be preceded by other preprocessor directives or comments" id="MISRA2008-16_0_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Macros shall only be #define'd or #undef'd in the global namespace" id="MISRA2008-16_0_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_0_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Function-like macros shall not be defined" id="MISRA2008-16_0_4" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2008-16_0_5" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" id="MISRA2008-16_0_6" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Undefined macro identifiers shall not be used in #if or #elif preprocessor directives, except as operands to the defined operator" id="MISRA2008-16_0_7" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token" id="MISRA2008-16_0_8" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2008-16_1_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2008-16_1_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Macros shall not be used" id="MISRA2008-16_2_1_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The #ifndef and #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The following pre-processor directives shall not be used: #if, #elif, #else, #ifdef, #undef, #pragma" id="MISRA2008-16_2_1_c" sev="3">
                    <Stats authTot="3;" authUrg="3;" total="3" />
                </Rule>
                <Rule cat="MISRA2008" desc="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" id="MISRA2008-16_2_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Include guards shall be provided" id="MISRA2008-16_2_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRA2008-16_2_4" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="There shall be at most one occurrence of the # or ## operators in a single macro definition" id="MISRA2008-16_3_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="All uses of the #pragma directive shall be documented" id="MISRA2008-16_6_1" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The names of standard library macros and objects shall not be reused" id="MISRA2008-17_0_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The names of standard library functions shall not be overridden" id="MISRA2008-17_0_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The setjmp macro and the longjmp function shall not be used" id="MISRA2008-17_0_5" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The C library shall not be used" id="MISRA2008-18_0_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" id="MISRA2008-18_0_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The library functions abort, exit, getenv and system from library &lt;cstdlib> shall not be used" id="MISRA2008-18_0_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The time handling functions of library &lt;ctime> shall not be used" id="MISRA2008-18_0_4" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The unbounded functions of library &lt;cstring> shall not be used" id="MISRA2008-18_0_5" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The macro offsetof shall not be used" id="MISRA2008-18_2_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Dynamic heap memory allocation shall not be used" id="MISRA2008-18_4_1" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="The signal handling facilities of &lt;csignal> shall not be used" id="MISRA2008-18_7_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The error indicator errno shall not be used" id="MISRA2008-19_3_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The stream input/output library &lt;cstdio> shall not be used" id="MISRA2008-27_0_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Different identifiers shall be typographically unambiguous" id="MISRA2008-2_10_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_4_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_4_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="MISRA2008-2_13_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Octal constants (other than zero) and octal escape sequences (other than &quot;\0&quot;) shall not be used" id="MISRA2008-2_13_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="MISRA2008-2_13_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Literal suffixes shall be upper case" id="MISRA2008-2_13_4" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Narrow and wide string literals shall not be concatenated" id="MISRA2008-2_13_5" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Trigraphs shall not be used" id="MISRA2008-2_3_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2008-2_7_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Sections of code shall not be &quot;commented out&quot; using C-style comments" id="MISRA2008-2_7_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" id="MISRA2008-3_1_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Functions shall not be declared at block scope" id="MISRA2008-3_1_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization" id="MISRA2008-3_1_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2008-3_3_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="If a function has internal linkage then all re-declarations shall include the static storage class specifier" id="MISRA2008-3_3_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="MISRA2008-3_9_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2008-3_9_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="NULL shall not be used as an integer value" id="MISRA2008-4_10_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRA2008-4_10_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" id="MISRA2008-4_5_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Expressions with type enum shall not be used as operands to built-in operators other than [ ], =,  ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="MISRA2008-4_5_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" id="MISRA2008-4_5_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2008-5_0_10" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The plain char type shall only be used for the storage and use of character values" id="MISRA2008-5_0_11" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="signed char and unsigned char type shall only be used for the storage and use of numeric values" id="MISRA2008-5_0_12" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="MISRA2008-5_0_13" sev="3">
                    <Stats authTot="2;" authUrg="2;" total="2" />
                </Rule>
                <Rule cat="MISRA2008" desc="The first operand of a conditional-operator shall have type bool" id="MISRA2008-5_0_14" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Array indexing shall be the only form of pointer arithmetic" id="MISRA2008-5_0_15" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2008-5_0_17" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2008-5_0_18" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The declaration of objects shall contain no more than two levels of pointer indirection" id="MISRA2008-5_0_19_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The declaration of objects shall contain no more than two levels of pointer indirection" id="MISRA2008-5_0_19_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The declaration of objects shall contain no more than two levels of pointer indirection" id="MISRA2008-5_0_19_c" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The declaration of objects shall contain no more than two levels of pointer indirection" id="MISRA2008-5_0_19_d" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_c" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_d" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_e" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_f" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_g" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="MISRA2008-5_0_20" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="MISRA2008-5_0_21" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_c" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An implicit integral conversion shall not change the signedness of the underlying type" id="MISRA2008-5_0_4_a" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="An implicit integral conversion shall not change the signedness of the underlying type" id="MISRA2008-5_0_4_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_c" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_c" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" id="MISRA2008-5_0_9" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2008-5_14_1" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="The comma operator shall not be used" id="MISRA2008-5_18_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Each operand of a logical &amp;&amp; or || shall be a postfix-expression" id="MISRA2008-5_2_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The comma operator, &amp;&amp; operator and the || operator shall not be overloaded" id="MISRA2008-5_2_11" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="MISRA2008-5_2_12" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="MISRA2008-5_2_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="MISRA2008-5_2_4" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="A cast shall not remove any const or volatile qualification from the type of a pointer or reference" id="MISRA2008-5_2_5" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="MISRA2008-5_2_6" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly" id="MISRA2008-5_2_7" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="MISRA2008-5_2_8" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="MISRA2008-5_3_1" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2008-5_3_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The unary &amp; operator shall not be overloaded" id="MISRA2008-5_3_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" id="MISRA2008-5_8_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Assignment operators shall not be used in sub-expressions" id="MISRA2008-6_2_1" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="Floating-point expressions shall not be directly or indirectly tested for equality or inequality" id="MISRA2008-6_2_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" id="MISRA2008-6_2_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The statement forming the body of a switch, while, do  while or for statement shall be a compound statement" id="MISRA2008-6_3_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" id="MISRA2008-6_4_1" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="All if ... else if constructs shall be terminated with an else clause" id="MISRA2008-6_4_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_c" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_d" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_e" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2008-6_4_4" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="MISRA2008-6_4_5" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The final clause of a switch statement shall be the default-clause" id="MISRA2008-6_4_6" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="The condition of a switch statement shall not have bool type" id="MISRA2008-6_4_7" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Every switch statement shall have at least one case-clause" id="MISRA2008-6_4_8" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="MISRA2008-6_5_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="MISRA2008-6_5_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The loop-counter shall not be modified within condition or statement" id="MISRA2008-6_5_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="MISRA2008-6_5_4" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="MISRA2008-6_5_5" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool" id="MISRA2008-6_5_6" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRA2008-6_6_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRA2008-6_6_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The continue statement shall only be used within a well-formed for loop" id="MISRA2008-6_6_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRA2008-6_6_4" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A function shall have a single point of exit at the end of the function" id="MISRA2008-6_6_5" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A variable which is not modified shall be const qualified" id="MISRA2008-7_1_1" sev="3">
                    <Stats authTot="20;" authUrg="18;" total="20" />
                </Rule>
                <Rule cat="MISRA2008" desc="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" id="MISRA2008-7_1_2_a" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified" id="MISRA2008-7_1_2_b" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" id="MISRA2008-7_3_1" sev="3">
                    <Stats authTot="4;" authUrg="4;" total="4" />
                </Rule>
                <Rule cat="MISRA2008" desc="The identifier main shall not be used for a function other than the global function main" id="MISRA2008-7_3_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="There shall be no unnamed namespaces in header files" id="MISRA2008-7_3_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="using-directives shall not be used" id="MISRA2008-7_3_4" sev="3">
                    <Stats authTot="4;" authUrg="4;" total="4" />
                </Rule>
                <Rule cat="MISRA2008" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="MISRA2008-7_3_5" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="All usage of assembler shall be documented" id="MISRA2008-7_4_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Assembler instructions shall only be introduced using the asm declaration" id="MISRA2008-7_4_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Assembly language shall be encapsulated and isolated" id="MISRA2008-7_4_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" id="MISRA2008-7_5_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="MISRA2008-7_5_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" id="MISRA2008-8_0_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" id="MISRA2008-8_3_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Functions shall not be defined using the ellipsis notation" id="MISRA2008-8_4_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" id="MISRA2008-8_4_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2008-8_4_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="All variables shall have a defined value before they are used" id="MISRA2008-8_5_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="MISRA2008-8_5_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="MISRA2008-8_5_3" sev="3">
                    <Stats authTot="1;" authUrg="1;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="const member functions shall not return non-const pointers or references to class-data" id="MISRA2008-9_3_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="MISRA2008-9_3_3" sev="3">
                    <Stats authTot="2;" authUrg="2;" total="2" />
                </Rule>
                <Rule cat="MISRA2008" desc="Unions shall not be used" id="MISRA2008-9_5_1" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="MISRA2008-9_6_2" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Bit-fields shall not have enum type" id="MISRA2008-9_6_3" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2008-9_6_4" sev="3">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Classes should not be derived from virtual bases" id="MISRA2008-10_1_1" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="MISRA2008-12_1_2" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="MISRA2008-14_8_2" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="An exception object should not have pointer type" id="MISRA2008-15_0_2" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_3_2" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The \ character should not occur in a header file name" id="MISRA2008-16_2_5" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The # and ## operators should not be used" id="MISRA2008-16_3_2" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_a" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_b" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Digraphs should not be used" id="MISRA2008-2_5_1" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Sections of code should not be &quot;commented out&quot; using C++ comments" id="MISRA2008-2_7_3" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="typedefs that indicate size and signedness should be used in place of the basic numerical types" id="MISRA2008-3_9_2" sev="4">
                    <Stats authTot="30;" authUrg="1;" total="30" />
                </Rule>
                <Rule cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_a" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_b" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_c" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_d" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_e" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_f" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="MISRA2008-5_2_10" sev="4">
                    <Stats authTot="1;" authUrg="0;" total="1" />
                </Rule>
                <Rule cat="MISRA2008" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="MISRA2008-5_2_3" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="A cast should not convert a pointer type to an integral type" id="MISRA2008-5_2_9" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
                <Rule cat="MISRA2008" desc="Functions should not call themselves, either directly or indirectly" id="MISRA2008-7_5_4" sev="4">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Rule>
            </RulesList>
            <CategoriesList>
                <Category desc="BugDetective (License Required)" name="BD" total="35">
                    <Category desc="Security" name="BD-SECURITY" total="6">
                        <Stats authTot="0;" authUrg="0;" total="0" />
                    </Category>
                    <Category desc="Memory" name="BD-MEM" total="3">
                        <Stats authTot="0;" authUrg="0;" total="0" />
                    </Category>
                    <Category desc="Threads &amp; Synchronization" name="BD-TRS" total="2">
                        <Stats authTot="0;" authUrg="0;" total="0" />
                    </Category>
                    <Category desc="Possible Bugs" name="BD-PB" total="11">
                        <Stats authTot="0;" authUrg="0;" total="0" />
                    </Category>
                    <Category desc="Resource Leaks" name="BD-LEAKS" total="12">
                        <Stats authTot="0;" authUrg="0;" total="0" />
                    </Category>
                    <Category desc="Miscellaneous" name="BD-MISC" total="1">
                        <Stats authTot="0;" authUrg="0;" total="0" />
                    </Category>
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Coding Conventions" name="CODSTA" total="158">
                    <Category desc="Coding Conventions for C++" name="CODSTA-CPP" total="77">
                        <Stats authTot="0;" authUrg="0;" total="0" />
                    </Category>
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Comments" name="COMMENT" total="10">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>               
                <Category desc="Exceptions" name="EXCEPT" total="18">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Formatting" name="FORMAT" total="38">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Initialization" name="INIT" total="14">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Joint Strike Fighter" name="JSF" total="219">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Metrics" name="METRICS" total="29">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="MISRA C" name="MISRA" total="58">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="MISRA C 2004" name="MISRA2004" total="193">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="MISRA C++ 2008" name="MISRA2008" total="262">
                    <Stats authTot="82;" authUrg="50;" total="82" />
                </Category>
                <Category desc="Memory and Resource Management" name="MRM" total="45">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Naming Conventions" name="NAMING" total="92">
                    <Category desc="Hungarian Notation" name="NAMING-HN" total="44">
                        <Stats authTot="0;" authUrg="0;" total="0" />
                    </Category>
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Object Oriented" name="OOP" total="50">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Optimization" name="OPT" total="33">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Possible Bugs" name="PB" total="43">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Physical File Organization" name="PFO" total="9">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Portability" name="PORT" total="26">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Preprocessor" name="PREPROC" total="12">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Qt Best Practices" name="QT" total="18">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Security" name="SECURITY" total="38">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="STL Best Practices" name="STL" total="42">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
                <Category desc="Template" name="TEMPL" total="12">
                    <Stats authTot="0;" authUrg="0;" total="0" />
                </Category>
            </CategoriesList>
            <SeverityList>
                <Severity id="3">
                    <Stats authTot="51;" authUrg="49;" total="51" />
                </Severity>
                <Severity id="4">
                    <Stats authTot="31;" authUrg="1;" total="31" />
                </Severity>
            </SeverityList>
        </Rules>
    </CodingStandards>
</ResultsSession>
